defaults: &defaults
  working_directory: ~/mojdigitalstudio/sentence-planning
  docker:
  - image: circleci/node:10.15.3-browsers

deploy_container_config: &deploy_container_config
  docker:
    - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
      environment:
        GITHUB_TEAM_NAME_SLUG: digital-prison-services
        APPLICATON_DEPLOY_NAME: sentence-planning
        REPONAME: sentence-planning

install_aws_cli: &install_aws_cli
  run:
    name: Set up aws
    command: |
      sudo apt-get update
      sudo apt-get --assume-yes install python3-pip
      sudo pip3 install awscli
      $(aws ecr get-login --region eu-west-1 --no-include-email)

version: 2
jobs:
  build:
    <<: *defaults
    steps:
    - checkout
    - run:
        name: Update npm
        command: 'sudo npm install -g npm@latest'
    - restore_cache:
        key: dependency-cache-{{ checksum "package-lock.json" }}
    - run:
        name: Install Dependencies
        command: npm ci
    - save_cache:
        key: dependency-cache-{{ checksum "package-lock.json" }}
        paths:
        - node_modules
    - run:
        name: Linter check
        command: npm run lint
    - run:
        command: |
          npm run build
          DATE=$(date '+%Y-%m-%d')
          export BUILD_NUMBER=${DATE}.${CIRCLE_BUILD_NUM}
          export GIT_REF="$CIRCLE_SHA1"
          npm run record-build-info
    - persist_to_workspace:
        root: .
        paths:
        - node_modules
        - build-info.json
        - assets/stylesheets

  test:
    <<: *defaults
    steps:
    - checkout
    - restore_cache:
        key: dependency-cache-{{ checksum "package-lock.json" }}
    - run:
        name: unit tests
        command: npm run test
    - store_test_results:
        path: ./reports

  build_docker:
    <<: *defaults
    steps:
    - checkout
    - attach_workspace:
        at: ~/mojdigitalstudio/sentence-planning
    - setup_remote_docker:
        exclusive: true
    - run:
        name: Build container and publish to docker hub (master only)
        command: |
          VERSION=$(egrep buildNumber build-info.json  | awk -F"\"" '{print $4}')
          GIT_REF=$(egrep gitRef build-info.json  | awk -F"\"" '{print $8}')
          BUILD_VERSION=${VERSION}

          docker build --rm=false . \
              --build-arg BUILD_NUMBER=$VERSION \
              --build-arg GIT_REF=$GIT_REF \
              --tag "mojdigitalstudio/sentence-planning:$BUILD_VERSION" \
              --label "maintainer=oasys@digital.justice.gov.uk" \
              --label "build.number=$CIRCLE_BUILD_NUM" \
              --label "build.url=$CIRCLE_BUILD_URL" \
              --label "build.gitref=$GIT_REF"

          docker login -u $DOCKER_USER -p $DOCKER_PASS
          docker tag mojdigitalstudio/sentence-planning:$BUILD_VERSION mojdigitalstudio/sentence-planning:latest
          docker push mojdigitalstudio/sentence-planning:$BUILD_VERSION
          docker push mojdigitalstudio/sentence-planning:latest

  copy_image_to_ecs:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - setup_remote_docker
      - *install_aws_cli
      - run:
          name: publish image to ecs
          command: |
            APP_VERSION=$(egrep buildNumber build-info.json  | awk -F"\"" '{print $4}')

            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker pull mojdigitalstudio/categorisation-tool:$APP_VERSION

            docker tag mojdigitalstudio/sentence-planning:$APP_VERSION "${ECR_ENDPOINT}/digital-prison-services/sentence-planning:${APP_VERSION}"
            docker tag "${ECR_ENDPOINT}/digital-prison-services/sentence-planning:${APP_VERSION}" "${ECR_ENDPOINT}/digital-prison-services/sentence-planning:latest"
            login="$(aws ecr get-login --region eu-west-1 --no-include-email)"
            ${login}
            docker push "${ECR_ENDPOINT}/digital-prison-services/sentence-planning:${APP_VERSION}"
            docker push "${ECR_ENDPOINT}/digital-prison-services/sentence-planning:latest"

  deploy_dev:
    <<: *deploy_container_config
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: ~/app
      - run:
          name: Kubectl deployment dev setup
          command: |
            $(aws ecr get-login --region eu-west-1 --no-include-email)
            setup-kube-auth
            kubectl config use-context development
      - deploy:
          name: Deploy to Dev
          command: |
            APP_VERSION=$(egrep buildNumber ~/app/build-info.json  | awk -F"\"" '{print $4}')
            helm upgrade sentence-planning ./helm_deploy/sentence-planning/. \
              --install --wait \
              --tiller-namespace=${KUBE_ENV_DEVELOPMENT_NAMESPACE} \
              --namespace=${KUBE_ENV_DEVELOPMENT_NAMESPACE} \
              --values ./helm_deploy/sentence-planning/values-development.yaml \
              --set image.repository="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}" \
              --set image.tag="${APP_VERSION}"

workflows:
  version: 2
  build_test_deploy:
    jobs:
    - build
    - test:
        requires:
        - build
    - build_docker:
        requires:
        - test
        filters:
          branches:
            only:
            - master
    - copy_image_to_ecs:
        requires:
          - build_docker
    - deploy_dev:
        requires:
          - copy_image_to_ecs
